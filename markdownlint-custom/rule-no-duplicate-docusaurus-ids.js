const { createSlugger, parseMarkdownHeadingId } = require('@docusaurus/utils');

/**
 * Custom rule for markdownlint to prevent duplicate heading IDs as generated by Docusaurus.
 *
 * @type {import("markdownlint").Rule}
 */
module.exports = {
    names: ['no-duplicate-docusaurus-ids'],
    description: 'Prevent duplicate heading IDs as generated by Docusaurus',
    tags: ['headings', 'anchors', 'docusaurus'],
    parser: 'micromark',
    function(params, onError) {
        const { tokens } = params.parsers.micromark;
        const slugger = createSlugger();
        const slugMap = new Map();

        for (const token of tokens) {
            if (token.type !== 'atxHeading' && token.type !== 'setextHeading') {
                continue;
            }

            const textNode = token.children.find(
                (child) => child.type === 'atxHeadingText' || child.type === 'setextHeadingText',
            );

            if (!textNode) {
                continue;
            }

            const { text, id } = parseMarkdownHeadingId(textNode.text);
            // If ID provided (e.g. `# title {#id}`), use it, otherwise generate slug from text
            const slug = id || slugger.slug(text);

            if (!slugMap.has(slug)) {
                slugMap.set(slug, []);
            }

            slugMap.get(slug).push({ lineNumber: token.startLine, text: textNode.text });
        }

        for (const [slug, entries] of slugMap.entries()) {
            if (entries.length > 1) {
                for (const { lineNumber, text } of entries) {
                    onError({
                        lineNumber,
                        detail: `Duplicate heading ID: "${slug}", causing conflict in ToC`,
                        context: text,
                    });
                }
            }
        }
    },
};
